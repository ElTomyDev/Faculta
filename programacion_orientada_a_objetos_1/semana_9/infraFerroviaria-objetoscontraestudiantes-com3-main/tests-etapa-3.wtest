import vagones.carga.*
import vagones.dormitorio.*
import vagones.pasajeros.*
import depositos.*
import locomotoras.*
import formacion.*

describe "test fase 3" {

    const vagonPasajeros = new VagonPasajeros(largo=10,ancho=4,tieneBanos=true,estaOrdenado=true)

    const vagonPasajeros2 = new VagonPasajeros(largo=7,ancho=2,tieneBanos=false,estaOrdenado=false)
      
    const vagonCarga = new VagonDeCarga(cargaMaxIdeal=6800,maderasSueltas=5)
      
    const vagonDormitorio = new VagonDormitorio(cantCompartimientos=8,cantCamas=3)

    const primeraFormacion = new Formacion(formacionVagones=[vagonPasajeros,vagonPasajeros2,vagonCarga,vagonDormitorio])

    const vagonCarga2 = new VagonDeCarga(cargaMaxIdeal=8000,maderasSueltas=1)

    const vagonDormitorio2 = new VagonDormitorio(cantCompartimientos=15,cantCamas=4)

    const segundaFormacion = new Formacion(formacionVagones=[vagonCarga2,vagonDormitorio2])

    const deposito1 = new Depositos(formacionesArmadas=[primeraFormacion, segundaFormacion],
                            locomotorasSueltas=[locomotora1, locomotora2])

    const locomotora1 = new Locomotoras(peso=3000,fuerzaDeArrastre=20000,velocidadMaxima=500)

    const locomotora2 = new Locomotoras(peso=5000,fuerzaDeArrastre=22000,velocidadMaxima=600)

    const locomotora3 = new Locomotoras(peso=4000,fuerzaDeArrastre=30000,velocidadMaxima=500)


    test "los vagones mas pesados de este deposito son el vagon de pasajeros y el vagon de dormitorio" {
        assert.equals(deposito1.vagonesMasPesadosDeFormaciones(),[vagonPasajeros, vagonDormitorio2])
    }

    test "este deposito no necesita un conductor experimentado"{
        assert.notThat(deposito1.necesitaConductorExperimentado())
    }

    test "ninguna formacion puede moverse"{
        assert.notThat(primeraFormacion.puedeMoverse())
        assert.notThat(segundaFormacion.puedeMoverse())
    }

    test "agregando distintas locomotoras, ahora ambas formaciones pueden moverse"{
        primeraFormacion.agregarLocomotora(locomotora1)
        primeraFormacion.agregarLocomotora(locomotora2)
        segundaFormacion.agregarLocomotora(locomotora3)

    
        assert.that(primeraFormacion.puedeMoverse() &&
                    segundaFormacion.puedeMoverse())     
    }

}